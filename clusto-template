#!/usr/bin/env python
import clustohttp
import jinja2

import optparse
import logging
import difflib
import socket
import sys


def main():
    parser = optparse.OptionParser(
        usage='%prog [options] <template> <output file>')
    parser.add_option('-r', '--root', dest='template_root',
        default='/usr/share/python-clustoclient/templates',
        help='Absolute path to template directory')
    parser.add_option('-n', '--name', dest='name',
        default=socket.gethostname().split('.', 1)[0],
        help='Name of the clusto object to query attributes from. Default ' +
             'is this system\'s hostname without a domain part')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
        help='Writes status messages and a diff to stderr if the output ' +
             'file differs from the existing file on disk')
    options, args = parser.parse_args()

    if len(args) < 2:
        parser.print_help()
        return -1
    template, outputfile = args[:2]

    tenv = jinja2.Environment(
        loader=jinja2.FileSystemLoader(options.template_root))

    clusto = clustohttp.ClustoProxy()

    try:
        server = clusto.get_by_name(options.name)
    except LookupError, e:
        sys.stderr.write(str(e) + '\n')
        return -1

    try:
        template = tenv.get_template(template)
    except jinja2.TemplateNotFound, e:
        sys.stderr.write('Unable to find template: %s/%s\n' % (options.template_root, template))
        sys.stderr.write(str(e) + '\n')
        return -1

    try:
        output = template.render(server=server, clusto=clusto)
    except Exception, e:
        sys.stderr.write('Error rendering template: %s\n' % str(e))
        return -1

    try:
        existing = file(outputfile, 'r').read()
    except:
        existing = ''
    if existing == output:
        if options.verbose:
            sys.stderr.write('Rendered template matches output file, not ' +
                             'overwriting.\n')
        return 0

    if options.verbose:
        diff = difflib.unified_diff([existing], [output], lineterm='\n')
        for line in diff:
            sys.stderr.write(line)
        sys.stderr.write('\n')
        sys.stderr.flush()

    fd = file(outputfile, 'w')
    fd.write(output)
    fd.flush()
    fd.close()
    return 0


if __name__ == '__main__':
    sys.exit(main())
